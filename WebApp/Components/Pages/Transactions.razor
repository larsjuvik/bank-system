@page "/transactions"
@using BankSystem.Data
@using Data.Models
@using Data.Repositories
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using WebApp.DTOs
@using WebApp.Services
@attribute [StreamRendering]
@attribute [Authorize]
@inject BankContext BankContext
@inject UserRepository UserRepository
@inject TransactionRepository TransactionRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject TransactionService TransactionService

<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

<p>Here you can see your financial transactions</p>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead class="bg-secondary bg-gradient bg-opacity-75">
        <tr>
            <th>Date</th>
            <th>From</th>
            <th>To</th>
            <th>Amount (USD)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
            {
                <tr class="bg-gradient bg-opacity-25 @(transaction.Amount < 0 ? "bg-danger" : "bg-success")">
                    <td>@transaction.TransactionDate.ToShortDateString()</td>
                    <td>@transaction.From?.AccountNumber</td>
                    <td>@transaction.To?.AccountNumber</td>
                    <td>@transaction.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TransactionDTO>? transactions = null;

    protected override async Task OnInitializedAsync()
    {
        // Get id from current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User?.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        transactions = await TransactionService.GetFromTransactionByIdAsync(userId);
    }
}
