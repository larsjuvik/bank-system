@page "/transactions"
@using Data.Models
@using Data.Repositories
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using WebApp.DTOs
@using WebApp.Services
@attribute [StreamRendering]
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject TransactionService TransactionService

<PageTitle>Transactions</PageTitle>

<div class="d-flex flex-row justify-content-between">
    <h1>Transactions</h1>
    <div class="d-flex flex-row justify-content-between gap-3 py-1">
        <button class="btn btn-sm btn-primary">+ Send funds</button>
        <button class="btn btn-sm btn-secondary">+ Receive funds</button>
    </div>
</div>

<p>Here you can see your financial transactions</p>

@if (_transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    <RoundedTable>
        <TableHead>
            <thead>
                <tr>
            <th>Date</th>
            <th>From</th>
            <th>To</th>
            <th>Amount (USD)</th>
        </tr>
            </thead>
        </TableHead>
        <TableBody>
            <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.TransactionDate.ToShortDateString()</td>
                    <td>@transaction.From?.AccountNumber</td>
                    <td>@transaction.To?.AccountNumber</td>
                    <td class=" @(transaction.Amount < 0 ? "table-danger" : "table-success")">@transaction.Amount
                    </td>
                </tr>
            }
            </tbody>
        </TableBody>
    </RoundedTable>
</div>
}

@code {
    private List<TransactionDTO>? _transactions = null;

    protected override async Task OnInitializedAsync()
    {
        // Get id from current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User?.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        _transactions = await TransactionService.GetAllTransactionsByIdAsync(userId);
    }
}
