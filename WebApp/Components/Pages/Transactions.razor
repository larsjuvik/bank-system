@page "/transactions"
@using WebApp.DTOs
@using WebApp.Services
@inject TransactionService TransactionService
@inject UserService UserService
@inject BankAccountService BankAccountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@attribute [StreamRendering]
<PageTitle>Users</PageTitle>

<MudDataGrid T="TransactionDto" RowStyleFunc="@RowStyle" Items="@_transactions" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@SearchFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged" Virtualize>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Title="Amount" Property="t => t.Amount" />
        <PropertyColumn Title="Sender" Property="t => t.From.AccountNumber" />
        <PropertyColumn Title="Receiver" Property="t => t.To.AccountNumber" />
        <PropertyColumn Title="Date" Property="t => t.TransactionDate" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TransactionDto" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<BankAccountDto>? _bankAccounts;
    private IQueryable<TransactionDto>? _transactions;
    private string _searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData()
    {
        // Get username from authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        
        _transactions = TransactionService.GetAllTransactionsByUserIdAsync(userId);
        _bankAccounts = await BankAccountService.GetAllBankAccountsByUserIdAsync(userId);
    }
    
    private Func<TransactionDto, int, string> RowStyle => (x, _) =>
    {
        if (_bankAccounts == null) return string.Empty;
        
        var receivingAccountNumber = x.To.AccountNumber;
        var userIsReceivingFunds = _bankAccounts.Any(bankAccount => bankAccount.AccountNumber == receivingAccountNumber);
        
        return userIsReceivingFunds ? "background-color: rgba(0, 255, 0, 0.15);" : "background-color: rgba(255, 0, 0, 0.15);";
    };

    private Func<TransactionDto, bool> SearchFilter => t =>
    {
        if (t.From.AccountNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        if (t.To.AccountNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void SelectedItemsChanged(HashSet<TransactionDto> obj)
    {
        // TODO
    }

    private void RowClicked(DataGridRowClickEventArgs<TransactionDto> obj)
    {
        // TODO
    }
}