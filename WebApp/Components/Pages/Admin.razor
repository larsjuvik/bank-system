@page "/admin"
@using WebApp.DTOs
@using WebApp.Services
@inject UserService UserService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering]
@rendermode InteractiveServer
<PageTitle>Admin</PageTitle>

<h1>Admin</h1>
@if (_users != null)
{
<div>
    <div class="overflow-hidden rounded card" style="border-bottom: none;">
        <QuickGrid class="table card-body table bg-secondary mb-0" Items="_users" Pagination="_pagination">
            <PropertyColumn Property="@(u => u.Username)" Sortable="true"/>
            <PropertyColumn Property="@(u => u.BirthDate)" Format="yyyy-MM-dd" Sortable="true"/>
        </QuickGrid>
        <nav aria-label="Pagination" class="mt-3">
            <ul class="pagination justify-content-center">
                @if (_pagination.CurrentPageIndex > 0)
                {
                    <li class="page-item"><a class="page-link" @onclick="async () => await _pagination.SetCurrentPageIndexAsync(_pagination.CurrentPageIndex - 1)">Previous</a></li>
                }
                @for (var i = _pagination.CurrentPageIndex - 3; i < _pagination.CurrentPageIndex + 4; i++)
                {
                    @if (i < 0) continue;

                    var iCopy = i;
                    @if (iCopy == _pagination.CurrentPageIndex)
                    {
                        <li class="page-item active"><a class="page-link" @onclick="async () => await _pagination.SetCurrentPageIndexAsync(iCopy)">@iCopy</a></li>
                    }
                    else
                    {
                        <li class="page-item"><a class="page-link" @onclick="async () => await _pagination.SetCurrentPageIndexAsync(iCopy)">@iCopy</a></li>
                    }
                }
                @if (_pagination.CurrentPageIndex < _pagination.LastPageIndex)
                {
                    <li class="page-item"><a class="page-link" @onclick="async () => await _pagination.SetCurrentPageIndexAsync(_pagination.CurrentPageIndex + 1)">Next</a></li>
                }
            </ul>
        </nav>
    </div>
</div>
}

@code {
    readonly PaginationState _pagination = new() { ItemsPerPage = 10 };

    private IQueryable<UserDto>? _users;

    protected override async Task OnInitializedAsync()
    {
        _users = (await UserService.GetAllUsersWithBankAccountsAsync()).AsQueryable();
    }
}