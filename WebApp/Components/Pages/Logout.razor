@page "/logout"
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Logout</PageTitle>

@if (_tryingToLogOut)
{
    <h1>Logging out ...</h1>
}
else
{
    <h1>Logged out!</h1>
}

<a href="/login">
    Press here to login.
</a>
<script>
window.logout = async () => {
    let result = await fetch("/api/authentication/logout", {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
    });
    return result.ok;
}
</script>

@code {
    private bool _tryingToLogOut;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        // Try to log out
        _tryingToLogOut = true;
        var loggedOut = await JS.InvokeAsync<bool>("logout");
        _tryingToLogOut = false;
        
        if (loggedOut)
        {
            RedirectAfterLogout();
        }
    }
    
    /// <summary>
    /// Redirects to returnUrl if set, or just returns to home screen and then does full refresh
    /// </summary>
    private void RedirectAfterLogout()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
        
        Navigation.NavigateTo(returnUrl ?? "/login", true, true);
    }
}