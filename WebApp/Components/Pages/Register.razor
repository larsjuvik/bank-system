@page "/register"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.Components.Helpers
@using WebApp.DTOs
@inject IJSRuntime Js
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Register</PageTitle>

<EditForm Model="RegisterData" OnValidSubmit="HandleValidSubmit" FormName="register" Enhance>
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Register a BlueFlare-account</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Name" Placeholder="Jane Doe"
                          @bind-Value="RegisterData.Name" For="@(() => RegisterData.Name)"></MudTextField>
            <MudDatePicker Label="Birthdate" HelperText="dd.MM.yyyy" Class="mt-3" DateFormat="dd.MM.yyyy"
                           @bind-Date="RegisterData.BirthDate" For="@(() => RegisterData.BirthDate)" />
            <MudTextField Label="Username" Class="mt-3"
                          @bind-Value="RegisterData.Username" For="@(() => RegisterData.Username)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="RegisterData.Password" For="@(() => RegisterData.Password)" InputType="InputType.Password"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="RegisterData.RepeatPassword" For="@(() => RegisterData.RepeatPassword)" InputType="InputType.Password"/>
            <MudSwitch Label="Admin Rights" Class="mt-3" @bind-Value="RegisterData.IsAdmin" For="@(() => RegisterData.IsAdmin)" Color="Color.Primary" />
        </MudCardContent>
        <MudCardActions>
            <div class="d-flex flex-grow-1 justify-end">
                @if (_isAttemptingRegistering)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Register</MudButton>
                }
            </div>
        </MudCardActions>
    </MudCard>
    Already have an account? <MudLink Href="/login">Login here</MudLink>
</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "register")]
    private RegisterDto RegisterData { get; set; } = new();
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _isAttemptingRegistering;
    
    private async Task HandleValidSubmit()
    {
        var registerDataSerialized = JsonSerializer.Serialize(RegisterData);
        _isAttemptingRegistering = true;
        var registered = await Js.InvokeAsync<bool>("registerAccount", registerDataSerialized);
        _isAttemptingRegistering = false;
        if (registered)
        {
            Snackbar.Add("Registered account", Severity.Success);
            NavigationHelper.ForceRedirectReturnUrlOrHome(Navigation);
        }
        else
        {
            Snackbar.Add("Could not register, check fields and try again", Severity.Error);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (AuthenticationState == null) return;
        
        var authState = await AuthenticationState;
        if (authState.User.Identity == null)
        {
            return;
        }

        // User is already logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            Snackbar.Add("Already logged in", Severity.Warning, options =>
            {
                options.CloseAfterNavigation = false;
            });
            Navigation.NavigateTo("/", false, true);
        }
    }
}