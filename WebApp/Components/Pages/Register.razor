@page "/register"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using WebApp.DTOs
@using WebApp.Services
@using static WebApp.Authorization.RoleHelper
@inject NavigationManager Navigation
@inject UserService UserService

<PageTitle>Register</PageTitle>

<div>
<h1>Register</h1>

    <EditForm Model="RegisterData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Name"
                              @bind-Value="RegisterData.Name" For="@(() => RegisterData.Name)"></MudTextField>
                <MudDatePicker Label="Birthdate" HelperText="dd.MM.yyyy" Class="mt-3" DateFormat="dd.MM.yyyy"
                              @bind-Date="RegisterData.BirthDate" For="@(() => RegisterData.BirthDate)"></MudDatePicker>
                <MudTextField Label="Username" Class="mt-3"
                              @bind-Value="RegisterData.Username" For="@(() => RegisterData.Username)"/>
                <MudTextField Label="Password" Class="mt-3"
                              @bind-Value="RegisterData.Password" For="@(() => RegisterData.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" Class="mt-3"
                              @bind-Value="RegisterData.RepeatPassword" For="@(() => RegisterData.RepeatPassword)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <div class="d-flex flex-grow-1 justify-end">
                    @if (_isAttemptingRegistering)
                    {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    }
                    else
                    {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    }
                </div>
            </MudCardActions>
        </MudCard>
        Already have an account? <MudLink Href="/login">Login here</MudLink>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm(FormName = "register")]
    private RegisterDto RegisterData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? _errorMessage = null;
    
    private bool _isAttemptingRegistering = false;


    private async Task HandleValidSubmit()
    {
        if (RegisterData?.Username == null || RegisterData?.Password == null || RegisterData?.RepeatPassword == null)
        {
            return;
        }

        // Check if the user exists
        _isAttemptingRegistering = true;
        var userExists = await UserService.UserExistsAsync(RegisterData.Username);
        if (userExists)
        {
            _errorMessage = "Username already exists";
            _isAttemptingRegistering = false;
            return;
        }

        // Save
        await UserService.CreateUserAsync(RegisterData, false);

        // Create a new ClaimsIdentity with the user's name and role
        var identity = new ClaimsIdentity(
        [
        new Claim(ClaimTypes.Name, RegisterData.Username),
new Claim(ClaimTypes.Role, GetRoleName(Role.User))
        ], CookieAuthenticationDefaults.AuthenticationScheme);

        // Create a new ClaimsPrincipal with the identity
        var user = new ClaimsPrincipal(identity);

        // Sign in the user
        if (HttpContext == null)
        {
            _errorMessage = "An unexpected error occured, please try again";
            _isAttemptingRegistering = false;
            return;
        }
        await HttpContext.SignInAsync(user);
        _isAttemptingRegistering = false;
        GracefulRedirect();
    }
    
    protected override void OnInitialized()
    {
        var identity = HttpContext?.User.Identity;
        if (identity == null)
        {
            return;
        }

        // User is already logged in
        if (identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    /// <summary>
    /// Gracefully redirects to returnUrl if set, or just returns to home screen
    /// </summary>
    private void GracefulRedirect()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

        if (returnUrl == null)
        {
            Navigation.NavigateTo("/");
        }
    }
}