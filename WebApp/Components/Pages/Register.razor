@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using global::BankSystem.Data
@inject NavigationManager Navigation
@inject BankContext Context

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<p>To use this bank demo, you need to create an account.
    Already have an account? <a href="/login">Log in here</a>.</p>

<div class="card mt-3">
    <EditForm Model="RegisterData" OnValidSubmit="HandleValidSubmit" FormName="register" Enhance>
        <div class="card-body">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="RegisterData.Username" />
                <ValidationMessage For="@(() => RegisterData.Username)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="RegisterData.Password" />
                <ValidationMessage For="@(() => RegisterData.Password)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="passwordConfirmation" class="form-label">Repeat password</label>
                <InputText id="passwordConfirmation" class="form-control" type="password"
                    @bind-Value="RegisterData.RepeatPassword" />
                <ValidationMessage For="@(() => RegisterData.RepeatPassword)" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm(FormName = "register")]
    private RegisterDTO RegisterData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private async Task HandleValidSubmit()
    {
        if (RegisterData?.Username == null || RegisterData?.Password == null || RegisterData?.RepeatPassword == null)
        {
            return;
        }

        // Check if the user exists
        var userFromDb = await Context.Users.FirstOrDefaultAsync(u => u.Username == RegisterData.Username);
        if (userFromDb != null)
        {
            return;
        }

        // TODO: create the user
    }
}