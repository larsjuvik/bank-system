@page "/register"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using WebApp.DTOs
@using WebApp.Services
@using static WebApp.Authorization.RoleHelper
@inject NavigationManager Navigation
@inject UserService UserService

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<p>To use this bank demo, you need to create an account.
    Already have an account? <a href="/login">Log in here</a>.</p>

<div class="card mt-3 card-form">
    <EditForm Model="RegisterData" OnValidSubmit="HandleValidSubmit" FormName="register" Enhance>
        <div class="card-body">
            @if (errorMessage != null)
            {
                <p class="text-danger">@errorMessage</p>
            }
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="RegisterData.Name" />
                <ValidationMessage For="@(() => RegisterData.Name)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="RegisterData.Username" />
                <ValidationMessage For="@(() => RegisterData.Username)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="RegisterData.Password" />
                <ValidationMessage For="@(() => RegisterData.Password)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="passwordConfirmation" class="form-label">Repeat password</label>
                <InputText id="passwordConfirmation" class="form-control" type="password"
                    @bind-Value="RegisterData.RepeatPassword" />
                <ValidationMessage For="@(() => RegisterData.RepeatPassword)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="birthdate" class="form-label">Date of birth</label>
                <InputDate id="birthdate" class="form-control" @bind-Value="RegisterData.BirthDate" />
                <ValidationMessage For="@(() => RegisterData.BirthDate)" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm(FormName = "register")]
    private RegisterDTO RegisterData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? errorMessage = null;


    private async Task HandleValidSubmit()
    {
        if (RegisterData?.Username == null || RegisterData?.Password == null || RegisterData?.RepeatPassword == null)
        {
            return;
        }

        // Check if the user exists
        var userExists = await UserService.UserExistsAsync(RegisterData.Username);
        if (userExists)
        {
            errorMessage = "Username already exists";
            return;
        }

        // Save
        await UserService.CreateUserAsync(RegisterData, false);

        // Create a new ClaimsIdentity with the user's name and role
        var identity = new ClaimsIdentity(
        [
        new Claim(ClaimTypes.Name, RegisterData.Username),
new Claim(ClaimTypes.Role, GetRoleName(Role.User))
        ], CookieAuthenticationDefaults.AuthenticationScheme);

        // Create a new ClaimsPrincipal with the identity
        var user = new ClaimsPrincipal(identity);

        // Sign in the user
        if (HttpContext == null)
        {
            errorMessage = "An unexpected error occured, please try again";
            return;
        }
        await HttpContext.SignInAsync(user);

        // Get URL params
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

        if (returnUrl == null)
        {
            Navigation.NavigateTo("/");
        }
    }
}