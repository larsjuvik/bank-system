@page "/register"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Register</PageTitle>

<div>
    <h1>Register</h1>

    <EditForm Model="RegisterData" OnValidSubmit="HandleValidSubmit" FormName="register" Enhance>
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Name" Placeholder="Enter full name"
                              @bind-Value="RegisterData.Name" For="@(() => RegisterData.Name)"></MudTextField>
                <MudDatePicker Label="Birthdate" Placeholder="Enter date of birth" HelperText="dd.MM.yyyy" Class="mt-3" DateFormat="dd.MM.yyyy"
                               @bind-Date="RegisterData.BirthDate" For="@(() => RegisterData.BirthDate)" />
                <MudTextField Label="Username" Placeholder="Enter desired username" Class="mt-3"
                              @bind-Value="RegisterData.Username" For="@(() => RegisterData.Username)"/>
                <MudTextField Label="Password" Placeholder="Enter desired password" Class="mt-3"
                              @bind-Value="RegisterData.Password" For="@(() => RegisterData.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Password" Placeholder="Repeat password" Class="mt-3"
                              @bind-Value="RegisterData.RepeatPassword" For="@(() => RegisterData.RepeatPassword)" InputType="InputType.Password"/>
                <MudSwitch Label="Admin Rights" Class="mt-3" @bind-Value="RegisterData.IsAdmin" For="@(() => RegisterData.IsAdmin)" Color="Color.Primary" />
            </MudCardContent>
            <MudCardActions>
                <div class="d-flex flex-grow-1 justify-end">
                    @if (_isAttemptingRegistering)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    }
                </div>
            </MudCardActions>
        </MudCard>
        Already have an account? <MudLink Href="/login">Login here</MudLink>
    </EditForm>
</div>
<script>
    /// Parameter is a serialized object of @(nameof(RegisterDto))
    window.registerAccount = async (registerDataSerialized) => {
        let result = await fetch("/api/authentication/register", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: registerDataSerialized
        });
        return result.ok;
    }
</script>

@code {
    [SupplyParameterFromForm(FormName = "register")]
    private RegisterDto RegisterData { get; set; } = new();
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? _errorMessage = null;
    private bool _isAttemptingRegistering = false;


    private async Task HandleValidSubmit()
    {
        var registerDataSerialized = JsonSerializer.Serialize(RegisterData);
        _isAttemptingRegistering = true;
        var registered = await JS.InvokeAsync<bool>("registerAccount", registerDataSerialized);
        _isAttemptingRegistering = false;
        if (registered)
        {
            Snackbar.Add("Registered account", Severity.Success);
            RedirectAfterRegister();
        }
        else
        {
            Snackbar.Add("Could not register, check fields and try again", Severity.Error);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (authenticationState == null) return;
        
        var authState = await authenticationState;
        if (authState.User.Identity == null)
        {
            return;
        }

        // User is already logged in
        if (authState.User.Identity.IsAuthenticated)
        {
            Snackbar.Add("Already logged in", Severity.Warning, options =>
            {
                options.CloseAfterNavigation = false;
            });
            Navigation.NavigateTo("/", false, true);
        }
    }

    /// <summary>
    /// Redirects to returnUrl if set, or just returns to home screen and then does full refresh
    /// </summary>
    private void RedirectAfterRegister()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
        Navigation.NavigateTo(returnUrl ?? "/", true, true);
    }
}