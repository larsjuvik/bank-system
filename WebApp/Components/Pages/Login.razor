@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using WebApp.DTOs
@using global::BankSystem.Data
@using static WebApp.Authorization.RoleHelper
@inject NavigationManager Navigation
@inject BankContext Context

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<p>To use this bank demo, you need to login.
    Don't have an account? <a href="/register">Register here</a>.</p>

<div class="card mt-3">
    <div class="card-body">
        @if (errorMessage != null)
        {
            <p class="text-danger">@errorMessage</p>
        }

        <EditForm Model="LoginData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="LoginData.Username" />
                <ValidationMessage For="@(() => LoginData.Username)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="LoginData.Password" />
                <ValidationMessage For="@(() => LoginData.Password)" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "login")]
    private LoginDTO LoginData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? errorMessage = null;

    private async Task HandleValidSubmit()
    {
        if (LoginData?.Username == null || LoginData?.Password == null)
        {
            errorMessage = "Fill in all fields";
            return;
        }

        // Check if the user exists
        var userFromDb = await Context.Users.FirstOrDefaultAsync(u => u.Username == LoginData.Username);
        if (userFromDb == null)
        {
            errorMessage = "Invalid credentials";
            return;
        }

        // Verify the password
        if (!Data.Models.User.VerifyPassword(LoginData.Password, userFromDb.PasswordHash, userFromDb.Salt))
        {
            errorMessage = "Invalid credentials";
            return;
        }

        // Create a new ClaimsIdentity with the user's name and role
        var identity = new ClaimsIdentity(
        [
        new Claim(ClaimTypes.Name, LoginData.Username),
new Claim(ClaimTypes.Role, GetRoleName(Role.User))
        ], CookieAuthenticationDefaults.AuthenticationScheme);


        // Create a new ClaimsPrincipal with the identity
        var user = new ClaimsPrincipal(identity);

        // Sign in the user
        if (HttpContext == null)
        {
            errorMessage = "An unexpected error occured, please try again";
            return;
        }
        await HttpContext.SignInAsync(user);

        // Get URL params
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

        if (returnUrl == null)
        {
            Navigation.NavigateTo("/");
        }
    }
}