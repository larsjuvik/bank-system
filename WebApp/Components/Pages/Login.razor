@page "/login"
@rendermode InteractiveServer
@using WebApp.Security
@inject NavigationManager Navigation
@inject DemoAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<h1>Login or register</h1>

To use this bank demo, you need to login or register an account.

<b>This is a demo application, and this application does not prioritize high security. Therefore a username is
    sufficient to login / create an account.</b>


@if (!string.IsNullOrWhiteSpace(validationError))
{
    <div class="alert alert-danger" role="alert">
    @validationError
</div>
}

<div>
    <label>Username: </label>
    <input @bind="username" />

    <label>Password: </label>
    <input @bind="password" type="password" />
</div>
<button @onclick="HandleUserLogin">Login</button>

@code {
    private string? username;
    private string? password;
    private string? validationError;

    /// <summary>
    /// Handle the user login
    /// </summary>
    private async void HandleUserLogin()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            validationError = "Username is required";
            return;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            validationError = "Password is required";
            return;
        }

        validationError = null;
        bool success = await AuthenticationStateProvider.Login(username, password);
        if (success)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            validationError = "Failed to login user";
        }
    }
} using BankSystem.Data;
