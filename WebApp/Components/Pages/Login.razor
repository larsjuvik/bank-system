@page "/login"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.Components.Helpers
@using WebApp.DTOs
@using WebApp.Services
@inject NavigationManager Navigation
@inject UserLoginService UserLoginService
@inject IJSRuntime Js
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<EditForm Model="LoginData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Login to BlueFlare</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="LoginData.Username" For="@(() => LoginData.Username)"/>
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="LoginData.Password" For="@(() => LoginData.Password)" InputType="InputType.Password"/>
        </MudCardContent>
        <MudCardActions>
            <div class="d-flex flex-grow-1 justify-end">
                @if (_isAttemptingLoggingIn)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Login" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Login</MudButton>
                }
            </div>
        </MudCardActions>
    </MudCard>
    Don't have an account? <MudLink Href="/register">Register here</MudLink>
</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "login")]
    private LoginDto LoginData { get; set; } = new();

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private bool _isAttemptingLoggingIn;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState == null) return;
        
        var identity = await AuthenticationState;

        // If user is authenticated, redirect to home page
        if (identity.User.Identity is { IsAuthenticated: true })
        {
            NavigationHelper.ForceRedirectHome(Navigation);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (LoginData.Username == null || LoginData.Password == null)
        {
            Snackbar.Add("Please fill in all fields", Severity.Error);
            return;
        }

        // Calling login-api from clients browser, s.t. cookies gets stored in browser
        var loggedIn = await AttemptLogin();
        if (loggedIn)
        {
            // Register new login
            await UserLoginService.AddUserLoginByUsername(LoginData.Username);
            NavigationHelper.ForceRedirectReturnUrlOrHome(Navigation);
        }
        else
        {
            Snackbar.Add("Could not log in, check credentials and try again", Severity.Error);
        }
    }

    private async Task<bool> AttemptLogin()
    {
        _isAttemptingLoggingIn = true;
        var loginDataSerialized = JsonSerializer.Serialize(LoginData);
        var loggedIn = await Js.InvokeAsync<bool>("login", loginDataSerialized);
        _isAttemptingLoggingIn = false;

        return loggedIn;
    }
}