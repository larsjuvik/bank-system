@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using WebApp.DTOs
@using WebApp.Services
@inject UserService UserService
@inject NavigationManager Navigation
@using static WebApp.Authorization.RoleHelper

<PageTitle>Login</PageTitle>

<div>
    <h1>Login</h1>

    <div class="card mt-3">
        <div class="card-body">
            @if (errorMessage != null)
            {
                <p class="text-danger">@errorMessage</p>
            }

            <EditForm Model="LoginData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="LoginData.Username" />
                    <ValidationMessage For="@(() => LoginData.Username)" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="LoginData.Password" />
                    <ValidationMessage For="@(() => LoginData.Password)" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Login</button>

                <p class="mt-3 mb-0">Don't have an account? <a href="/register">Register here</a></p>
            </EditForm>
        </div>
    </div>
</div>
@code {
    [SupplyParameterFromForm(FormName = "login")]
    private LoginDTO LoginData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            return;
        }

        var identity = HttpContext.User.Identity;
        if (identity == null)
        {
            return;
        }

        // User is already logged in
        if (identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (LoginData?.Username == null || LoginData?.Password == null)
        {
            errorMessage = "Fill in all fields";
            return;
        }

        // Check if the user exists
        var userExists = await UserService.UserExistsAsync(LoginData.Username);
        if (!userExists)
        {
            errorMessage = "Invalid credentials";
            return;
        }

        // Verify the password
        var credentialsVerified = await UserService.VerifyUserCredentialsAsync(LoginData.Username, LoginData.Password);
        if (!credentialsVerified)
        {
            errorMessage = "Invalid credentials";
            return;
        }

        // Create a new identity for a user
        var identity = new ClaimsIdentity(
        [
        new Claim(ClaimTypes.Name, LoginData.Username),
new Claim(ClaimTypes.Role, GetRoleName(Role.User))
        ], CookieAuthenticationDefaults.AuthenticationScheme);

        // Check if the user is an admin
        if (await UserService.IsAdminAsync(LoginData.Username))
        {
            identity.AddClaim(new Claim(ClaimTypes.Role, GetRoleName(Role.Admin)));
        }

        // Create a new ClaimsPrincipal with the identity
        var user = new ClaimsPrincipal(identity);

        // Sign in the user
        if (HttpContext == null)
        {
            errorMessage = "An unexpected error occured, please try again";
            return;
        }
        await HttpContext.SignInAsync(user);
        GracefulRedirect();
    }

    /// <summary>
    /// Gracefully redirects to returnUrl if set, or just returns to home screen
    /// </summary>
    private void GracefulRedirect()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

        if (returnUrl == null)
        {
            Navigation.NavigateTo("/");
        }
    }
}