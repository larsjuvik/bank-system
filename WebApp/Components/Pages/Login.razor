@page "/login"
@using System.Text.Json
@using WebApp.DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

<div>
    <h1>Login</h1>

    <div class="card mt-3">
        <div class="card-body">
            @if (_errorMessage != null)
            {
                <p class="text-danger">@_errorMessage</p>
            }

            <EditForm Model="LoginData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="LoginData.Username" />
                    <ValidationMessage For="@(() => LoginData.Username)" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="LoginData.Password" />
                    <ValidationMessage For="@(() => LoginData.Password)" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Login</button>

                <p class="mt-3 mb-0">Don't have an account? <a href="/register">Register here</a></p>
            </EditForm>
        </div>
    </div>
</div>
<script>
    /// Parameter is a serialized object containing "Username" and "Password" fields
    window.login = async (loginDataSerialized) => {
        console.info("Trying to log in:", username);
        
        let result = await fetch("/api/authentication/login", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: loginDataSerialized
        });
        return result.ok;
    }


</script>
@code {
    [SupplyParameterFromForm(FormName = "login")]
    private LoginDto LoginData { get; set; } = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            return;
        }

        var identity = HttpContext.User.Identity;
        if (identity == null)
        {
            return;
        }

        // User is already logged in
        if (identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (LoginData?.Username == null || LoginData?.Password == null)
        {
            _errorMessage = "Fill in all fields";
            return;
        }

        // Login: the call is from clients browser, such that cookies are stored in the clients browser
        var loginDataSerialized = JsonSerializer.Serialize(LoginData);
        var loggedIn = await JS.InvokeAsync<bool>("login", loginDataSerialized);
        if (loggedIn)
        {
            RedirectAfterLogin();
        }
    }

    /// <summary>
    /// Redirects to returnUrl if set, or just returns to home screen and then does full refresh
    /// </summary>
    private void RedirectAfterLogin()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

        Navigation.NavigateTo(returnUrl ?? "/", true, true);
    }
}