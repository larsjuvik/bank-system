@page "/login"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<div>
    <h1>Login</h1>

    <EditForm Model="LoginData" OnValidSubmit="HandleValidSubmit" FormName="login" Enhance>
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Username"
                              @bind-Value="LoginData.Username" For="@(() => LoginData.Username)"/>
                <MudTextField Label="Password" Class="mt-3"
                              @bind-Value="LoginData.Password" For="@(() => LoginData.Password)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <div class="d-flex flex-grow-1 justify-end">
                    @if (_isAttemptingLoggingIn)
                    {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    }
                    else
                    {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    }
                </div>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>
<script>
    /// Parameter is a serialized object containing "Username" and "Password" fields
    window.login = async (loginDataSerialized) => {        
        let result = await fetch("/api/authentication/login", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: loginDataSerialized
        });
        return result.ok;
    }


</script>
@code {
    [SupplyParameterFromForm(FormName = "login")]
    private LoginDto LoginData { get; set; } = new();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? _errorMessage;

    private bool _isAttemptingLoggingIn = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (authenticationState == null) return;
        
        var identity = await authenticationState;

        // If user is not authenticated, return
        if (identity.User.Identity is not { IsAuthenticated: true }) return;
        
        // User is logged in
        var username = identity.User.Identity.Name;
        Snackbar.Add("Logged in as " + username, Severity.Success, options =>
        {
            options.CloseAfterNavigation = false;
        });
        RedirectAfterLogin();
    }

    private async Task HandleValidSubmit()
    {
        if (LoginData?.Username == null || LoginData?.Password == null)
        {
            _errorMessage = "Fill in all fields";
            return;
        }

        // Login: the call is from clients browser, such that cookies are stored in the clients browser
        var loginDataSerialized = JsonSerializer.Serialize(LoginData);
        _isAttemptingLoggingIn = true;
        var loggedIn = await JS.InvokeAsync<bool>("login", loginDataSerialized);
        _isAttemptingLoggingIn = false;
        if (loggedIn)
        {
            // Hard refresh page to load cookies
            Navigation.Refresh(true);
        }
        else
        {
            Snackbar.Add("Could not log in, check credentials and try again", Severity.Error);
        }
    }

    /// <summary>
    /// Redirects to returnUrl if set, or just returns to home screen and then does full refresh
    /// </summary>
    private void RedirectAfterLogin()
    {
        var uri = new Uri(Navigation.Uri);
        var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
        Navigation.NavigateTo(returnUrl ?? "/", false, true);
    }
}