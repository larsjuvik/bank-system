@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@using WebApp.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]
@attribute [StreamRendering]
@inject UserService UserService
@inject TransactionService TransactionService
@inject BankAccountService BankAccountService


<PageTitle>Overview</PageTitle>

<div><h1>Overview</h1>

<div class="card">
    <div class="card-body">
        <div class="d-flex flex-column justify-content-between gap-2">
            <div class="d-flex flex-row justify-content-between gap-3">
                <div class="flex-grow-1">
                    <label for="name" class="form-label">Name</label>
                    <input id="name" class="form-control" placeholder="..." value="@_user?.Name" disabled />
                </div>
                <div>
                    <label for="username" class="form-label">Birthdate</label>
                    <input id="username" class="form-control" placeholder="..."
                        value="@_user?.BirthDate.ToShortDateString()" disabled />
                </div>
            </div>
            <div class="d-flex flex-row justify-content-between gap-3">
                <div class="flex-grow-1">
                    <label for="totalBalance" class="form-label">Balance</label>
                    <input id="totalBalance"
                        class="form-control bg-opacity-25 @(_totalBalance != null && _totalBalance != 0 ? (_totalBalance > 0 ? "bg-success" : "bg-danger") : string.Empty)"
                        type="number" placeholder="..." value="@_totalBalance" disabled />
                </div>
                <div>
                    <label for="accounts" class="form-label">Accounts</label>
                    <input id="accounts" class="form-control" placeholder="..." value="@_bankAccounts?.Count"
                        disabled />
                </div>
            </div>
        </div>
    </div>
</div></div>


@if (_bankAccounts != null)
{
    <div><h2>Accounts</h2>
<div class="overflow-hidden rounded card" style="border-bottom: none;">
<table class="card-body table bg-secondary mb-0">
    <thead>
        <tr>
            <th>Name</th>
            <th>Balance</th>
            <th>Account number</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var bankAccount in _bankAccounts)
            {
                <tr>
                    <td>@bankAccount.Owner.Name</td>
                    <td>@bankAccount.Balance</td>
                    <td>@bankAccount.AccountNumber</td>
                </tr>
            }
    </tbody>
</table></div>
</div>
}

@if (_bankAccounts != null)
{
    <div><h2>Cards</h2>
    <div class="d-flex flex-row justify-content-between gap-3 pb-4 pe-4"
    style="overflow-x: auto; overflow-y: visible !important;">
    @foreach (var bankAccount in _bankAccounts.Where(b => b.HasDebitCard))
        {
            <BankAccountCard Title="@bankAccount.Owner.Name" DescriptionLeft="@bankAccount.AccountNumber"
                DescriptionRight="@bankAccount.Balance.ToString()" />
        }
    </div></div>


}

@code {
    private UserDTO? _user = null;
    private List<TransactionDTO>? _transactions = null;
    private List<BankAccountDTO>? _bankAccounts = null;
    private decimal? _totalBalance = null;

    protected override async Task OnInitializedAsync()
    {
        // Get id from current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User?.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        _user = await UserService.GetUserByUsernameAsync(username);
        _transactions = await TransactionService.GetAllTransactionsByIdAsync(userId);
        _bankAccounts = await BankAccountService.GetAllBankAccountsByUserIdAsync(userId);

        // Calculate remaining fields
        _totalBalance = _bankAccounts?.Sum(ba => ba.Balance);
    }
}