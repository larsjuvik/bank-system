@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@using WebApp.Services
@using WebApp.Components.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@attribute [StreamRendering]
@inject UserService UserService
@inject TransactionService TransactionService
@inject BankAccountService BankAccountService
@inject NavigationManager NavigationManager

<PageTitle>Overview</PageTitle>

@if (_user?.Name.Split(" ").FirstOrDefault() != null)
{
    <h1>Hi, @_user.Name.Split(" ").First()</h1>
}

@if (_user?.BankAccounts.Count is > 0)
{
<MudTable Items="_user.BankAccounts" Hover="true" Breakpoint="Breakpoint.Sm" T="BankAccountDto" OnRowClick="BankAccountClicked">
    <HeaderContent>
        <MudTh>Account</MudTh>
        <MudTh>Balance</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.AccountNumber</MudTd>
        <MudTd DataLabel="Sign">@context.Balance</MudTd>
        <MudTd DataLabel="Name">@context.AccountType</MudTd>
    </RowTemplate>
</MudTable>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudText>You don't have any bank accounts.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Create one</MudButton>
        </MudCardActions>
    </MudCard>
}


<div>
    <h2>Cards</h2>
@if (_bankAccounts?.Where(b => b.HasDebitCard).Count() is 0)
{
    <p>No cards registered.</p>
    <button class="btn btn-sm btn-primary">Create card</button>
}
else
{
    <DebitCardCollection CardAccounts="_bankAccounts?.Where(b => b.HasDebitCard).ToList()" />
}
</div>

@code {
    private UserDto? _user = null;
    private List<TransactionDto>? _transactions = null;
    private List<BankAccountDto>? _bankAccounts = null;
    private decimal? _totalBalance = null;
    private string? _firstName = null;

    protected override async Task OnInitializedAsync()
    {
        // Get id from current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        _user = await UserService.GetUserByUsernameAsync(username);
        _firstName = _user.Name.Split(" ").FirstOrDefault() ?? "?";
        _transactions = await TransactionService.GetAllTransactionsByUserIdAsync(userId);
        _bankAccounts = await BankAccountService.GetAllBankAccountsByUserIdAsync(userId);

        // Calculate remaining fields
        _totalBalance = _bankAccounts?.Sum(ba => ba.Balance);
    }

    private void BankAccountClicked(TableRowClickEventArgs<BankAccountDto> obj)
    {
        var bankAccountNumber = obj.Item?.AccountNumber;
        if (bankAccountNumber == null)
        {
            return;
        }

        NavigationManager.NavigateTo($"/bankaccount/${bankAccountNumber}");
    }
}