@page "/"
@using Data.Helpers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@using WebApp.Services
@using WebApp.Components.CustomComponents
@using WebApp.Components.Dialogs
@using WebApp.Settings
@attribute [Authorize]
@attribute [StreamRendering]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CultureOptions Culture
@inject UserService UserService
@inject BankAccountService BankAccountService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Overview</PageTitle>

<WelcomeUserCard UserDataWithLogins="_userDtoWithLogins" />

@if (_userBankAccounts?.Count is > 0)
{
<MudTable Breakpoint="Breakpoint.None" Dense="true" Items="_userBankAccounts" Hover="true" T="BankAccountDto" OnRowClick="BankAccountClicked">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Bank Accounts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Account</MudTh>
        <MudTh>Balance</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="AccountNumber">@context.AccountNumberFormatted</MudTd>
        <MudTd DataLabel="Balance">@(context.Balance.ToString("C", Culture.Info))</MudTd>
        <MudTd DataLabel="AccountType">@BankAccountTypeHelper.GetStringFromBankAccountType(context.Type)</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudButton Class="ma-2" @onclick="CreateBankAccountClicked" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Text" Color="Color.Primary">Create account</MudButton>
    </FooterContent>
</MudTable>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudText>You don't have any bank accounts.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton @onclick="CreateBankAccountClicked" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Text" Color="Color.Primary">Create one</MudButton>
        </MudCardActions>
    </MudCard>
}

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Cards</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (_userBankAccounts?.Where(b => b.HasDebitCard).Count() is 0)
        {
            <MudText>No cards registered.</MudText>
        }
        else
        {
            <DebitCardCollection CardAccounts="_userBankAccounts?.Where(b => b.HasDebitCard).ToList()" />
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton @onclick="ConnectCardClicked" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Text" Color="Color.Primary">Add Card</MudButton>
    </MudCardActions>
</MudCard>


@code {
    private UserDto? _userDtoWithLogins;
    private List<BankAccountDto>? _userBankAccounts;

    protected override async Task OnInitializedAsync()
    {
        // Get username from authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        _userDtoWithLogins = await UserService.GetUserWithLoginsByUsernameAsync(username);
        _userBankAccounts = await BankAccountService.GetAllBankAccountsByUserIdAsync(userId);
    }

    /// <summary>
    /// Runs when user clicks on a bank account
    /// </summary>
    private void BankAccountClicked(TableRowClickEventArgs<BankAccountDto> obj)
    {
        var bankAccountNumber = obj.Item?.AccountNumber;
        if (bankAccountNumber == null)
        {
            return;
        }

        NavigationManager.NavigateTo($"/bankaccount/${bankAccountNumber}");
    }
    
    /// <summary>
    /// Runs when user clicks button to create bank account
    /// </summary>
    private async Task CreateBankAccountClicked()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        await DialogService.ShowAsync<AddBankAccountDialog>("Add Bank Account", options);
    }

    /// <summary>
    /// Runs when user clicks button to connect card
    /// </summary>
    private async Task ConnectCardClicked()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<ConnectCreditCardDialog>{{ x => x.AvailableBankAccounts, _userBankAccounts }};
        
        await DialogService.ShowAsync<ConnectCreditCardDialog>("Connect Credit Card", parameters, options);
    }
}