@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.DTOs
@using WebApp.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@attribute [StreamRendering]
@inject UserService UserService
@inject TransactionService TransactionService
@inject BankAccountService BankAccountService

<PageTitle>Overview</PageTitle>

@if (_user?.Name.Split(" ").FirstOrDefault() != null)
{
    <h1>Hi, @_user.Name.Split(" ").First()</h1>
}

<div>
    <h2>Cards</h2>
@if (_bankAccounts == null || _bankAccounts?.Where(b => b.HasDebitCard).Count() == 0)
{
    <p>No cards registered.</p>
    <button class="btn btn-sm btn-primary">Create card</button>
}
else
{
    <div class="d-flex flex-row gap-4 pb-4 ps-1 pe-4" style="overflow-x: auto; overflow-y: visible !important;">
    @foreach (var bankAccount in _bankAccounts.Where(b => b.HasDebitCard))
    {
        <DebitCard
            Title="@bankAccount.Owner.Name"
            DescriptionLeft="@bankAccount.AccountNumber"
            DescriptionRight="@bankAccount.Balance.ToString()"
            Id="@bankAccount.AccountNumber" />
    }
    </div>
}
</div>

@code {
    private UserDto? _user = null;
    private List<TransactionDto>? _transactions = null;
    private List<BankAccountDto>? _bankAccounts = null;
    private decimal? _totalBalance = null;
    private string? _firstName = null;

    protected override async Task OnInitializedAsync()
    {
        // Get id from current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;
        if (username == null)
        {
            return;
        }

        var userId = await UserService.GetIdByUsernameAsync(username);
        _user = await UserService.GetUserByUsernameAsync(username);
        _firstName = _user.Name.Split(" ").FirstOrDefault() ?? "?";
        _transactions = await TransactionService.GetAllTransactionsByUserIdAsync(userId);
        _bankAccounts = await BankAccountService.GetAllBankAccountsByUserIdAsync(userId);

        // Calculate remaining fields
        _totalBalance = _bankAccounts?.Sum(ba => ba.Balance);
    }
}