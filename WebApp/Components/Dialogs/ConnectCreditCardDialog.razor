@using WebApp.DTOs
@using WebApp.Services
@inject BankAccountService BankAccountService
<MudDialog>
    <TitleContent>
        Connect Card to a Bank Account
    </TitleContent>
    <DialogContent>
        <EditForm EditContext="_editContext">
            <DataAnnotationsValidator/>
            <MudStack>
                <MudSelect T="string" Label="Connected Bank Account" MultiSelection="false" @bind-Value="_model.ConnectedBankAccountNumber">
                    @foreach (var bankAccount in AvailableBankAccounts)
                    {
                        <MudSelectItem T="string" Value="@bankAccount.AccountNumber">@bankAccount.AccountNumber</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Name" @bind-Value="_model.Name" For="@(() => _model.Name)" />
            </MudStack>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private static ConnectCardToBankAccountDto _model = new();
    private EditContext _editContext = new(_model);
    
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public List<BankAccountDto> AvailableBankAccounts { get; set; } = [];

    private async Task Submit()
    {
        var validated = _editContext.Validate();
        if (!validated) return;

        // TODO: we want to access error message in case of fail
        await BankAccountService.ConnectCardToBankAccount(_model);

        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog?.Cancel();
}